# -*- coding: utf-8 -*-
"""LAB4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xIutRR0Lz3uxjRRPBCA27UB24qYQWlzP
"""

class Node:
  def __init__(self, e=None, n=None, p=None):
    self.element = e
    self.next = n
    self.prev = p

"""To complete this class, [this](https://docs.google.com/document/d/1fm0pI9rLdGM1nme7jD_iA4ZrjRzBzKjg3uPh55IHyM4/edit?usp=sharing) lecture note will help you a lot.

In fact completing these tasks, will help you finish 90% of your assignment.
"""

class DoublyList:

    # Creates a Dummy Head for Dummy Headed Circular Doubly Circular Linked List.
    def __init__(self):
        self.dummy_head = Node()

    # create a DHDCL from an array
    def create_list(self, l):
        # To Do
        if len(l) == 0:
            return
        c_node = self.dummy_head
        for var in range(len(l)):
            new_node = Node(l[var], None, c_node)
            c_node.next = new_node
            c_node = new_node
        self.dummy_head.prev = c_node
        c_node.next = self.dummy_head

    # Counts the number of Nodes in the list and return the number
    def countNode(self):
        # To Do
        c = 0
        temp = self.dummy_head
        if temp.next == None and temp.prev == None:
            return None
        while temp.next != self.dummy_head:
            c += 1
            temp = temp.next
        return c

    # prints the elements in the list forward
    def forwardprint(self):
        # To Do
        if self.dummy_head.next == None and self.dummy_head.prev == None:
            return
        temp = self.dummy_head
        while temp.next != self.dummy_head:
            print(temp.next.element, end=',')
            temp = temp.next

        print()

    # prints the elements in the list backward
    def backwardprint(self):
        if self.dummy_head.next == None and self.dummy_head.prev == None:
            return
        temp = self.dummy_head
        while temp.prev != self.dummy_head:
            print(temp.prev.element, end=',')
            temp = temp.prev
        print()

    # returns the reference of the at the given index. For invalid index return None.
    def nodeAt(self, idx):
        # To Do
        if idx > DoublyList.countNode(self) or idx < 0:
            return None
        temp = self.dummy_head
        for var in range(idx + 1):
            temp = temp.next
        return temp

    # returns the index of the containing the given element. if the element does not exist in the List, return -1.

    def indexOf(self, elem):
        # To Do
        temp = self.dummy_head.next
        idx = 0
        while temp.next != self.dummy_head.next:
            if temp.element == elem:
                return idx
            idx += 1
            temp = temp.next

        return -1

    # insert at specific index of the DHDCL
    def insert(self, elem, idx):
        # To Do
        temp = self.dummy_head
        new_node = Node(elem)
        if idx == 0 and self.dummy_head.next == None and self.dummy_head.prev == None:
            node1 = self.dummy_head
            new_node = Node(elem, node1, node1)
            node1.next = new_node
            node1.prev = new_node
        elif idx == 0 and self.dummy_head.next != None and self.dummy_head.prev != None:
            node1 = self.dummy_head
            node2 = self.dummy_head.next
            node1.next = new_node
            new_node.prev = node1
            new_node.next = node2
            node2.prev = new_node

        elif idx == DoublyList.countNode(self) + 1:
            node1 = self.dummy_head
            node2 = self.dummy_head.prev
            new_node = Node(elem, node1, node2)
            node1.prev = new_node
            node2.next = new_node
        elif idx > DoublyList.countNode(self) + 1 or idx < 0:
            return
        else:
            node1 = DoublyList.nodeAt(self, idx - 1)
            node2 = DoublyList.nodeAt(self, idx)
            new_node = Node(elem, node2, node1)
            node1.next = new_node
            node2.prev = new_node

    # removes the node of the specific index and returns the element of the node
    def remove(self, idx):
        # To Do
        if idx == 0:
            node1 = self.dummy_head.next
            node2 = self.dummy_head
            node3 = self.dummy_head.next.next
            node2.next = node3
            node3.prev = node2
            node1.next = node1.prev = Node
            return node1.element

        else:
            node1 = DoublyList.nodeAt(self, idx)
            node2 = DoublyList.nodeAt(self, idx - 1)
            node3 = DoublyList.nodeAt(self, idx + 1)
            node2.next = node3
            node3.prev = node2
            node1.next = node1.prev = None
            return node1.element

class Patient:

    def __init__(self, id: int, name: str, age: int, blood_group: str) -> None:

        self.id = id
        self.name = name
        self.age = age
        self.blood_group = blood_group

class WRM:
    idx = None
    remaining = 0

    def __init__(self) -> None:
        self.line = DoublyList()

    def RegisterPatient(self, id: int, name: str, age: int, bloodgroup: str) -> None:

        if (self.line.countNode() == None and id != 0):
            print('Not Success ')
            return False
        if WRM.idx == None and id == 0:
            WRM.idx = 0
            self.line.insert(Patient(1, name, age, bloodgroup), 0)
            WRM.remaining += 1
            print('Success')
            return True
        elif self.line.countNode() < id:
            print('Not Success ')
            return False
        elif WRM.idx + 1 != id:
            print('Not Success ')
            return False
        else:
            line = self.line
            WRM.idx += 1
            new_patient = Patient(WRM.idx + 1, name, age, bloodgroup)
            line.insert(new_patient, WRM.idx)
            WRM.remaining += 1
            print('Success')
            return True

    def ServePatient(self):
        if WRM.remaining == 0:
            print('No Patient available')
            return
        WRM.remaining -= 1
        line = self.line.remove(0)
        print(line.name)

    def ShowAllPatient(self):

        if self.line.dummy_head.next == None and self.line.dummy_head.prev == None:
            return
        temp = self.line.dummy_head
        while temp.next != self.line.dummy_head:
            p = temp.next.element
            id = p.id
            name = p.name
            age = p.age
            blood_group = p.blood_group
            print(f'{id}_{name}_{age}_{blood_group}')
            temp = temp.next

        print()

    def CanDoctorGoHome(self):
        if WRM.remaining == 0:
            print('yes')
            WRM.idx = None
            return True
        else:
            print('no')
            return False

    def CancelAll(self):
        WRM.idx = None
        WRM.remaining = 0
        self.line = DoublyList()
        print('Success ')

ever_care = WRM()
count = int(input('Enter the number of patient Doctor will take'))
while count != 0 :
  id,name,age,blood_group = int(input('ID')) , input("name") , int(input('age')) , input('blood group')
  if ever_care.RegisterPatient(id,name,age,blood_group):
    count-=1
  print()


ever_care.ServePatient()
ever_care.ShowAllPatient()
ever_care.CanDoctorGoHome()
ever_care.CancelAll()
ever_care.CanDoctorGoHome()

print("///  Test 01  ///")
h1 = DoublyList() # Creates a dummy headed doubly circular linked list
h1.create_list(np.array([10,20,30,40]))
print('Forward Print: ', end = ' ')
h1.forwardprint() # This should print: 10,20,30,40.
print('Backward Print: ', end = ' ')
h1.backwardprint() # This should print: 40,30,20,10.
print('Total Nodes: ', end = ' ')
print(h1.countNode()) # This should print: 4
print()

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
print('Node at 2nd index: ', end = ' ')
n = h1.nodeAt(2)
print(n.element if n!=None else 'Index Error')# This should print: 30.
print('Node at 0th index: ', end = ' ')
n = h1.nodeAt(0)
print(n.element if n!=None else 'Index Error')# This should print: 10. IGNORE DUMMY HEAD
print('Node at -1th index: ', end = ' ')
n = h1.nodeAt(-1)
print(n.element if n!=None else 'Index Error')# This should print "index error"
print()

print("///  Test 03  ///")
print('Index of element 40:', end = ' ')
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that
print('Index of element 6:', end = ' ')
index = h1.indexOf(6)
print(index) # doesn't exists in the list this will print -1.
print()

print("///  Test 04  ///")
print('Inserting 85 in 0th index')
h1.insert(85,0)
print('Forward Print: ', end = ' ')
h1.forwardprint() # This should print: 85,10,20,30,40.
print('Backward Print: ', end = ' ')
h1.backwardprint() # This should print: 40,30,20,10,85.

print()
print('Inserting 95 in 3rd index')
h1.insert(95,3)
print('Forward Print: ', end = ' ')
h1.forwardprint() # This should print: 85,10,20,95,30,40.
print('Backward Print: ', end = ' ')
h1.backwardprint() # This should print: 40,30,95,20,10,85.

print()
print('Inserting 75 in 6th index')
h1.insert(75,6)
print('Forward Print: ', end = ' ')
h1.forwardprint() # This should print: 85,10,20,95,30,40,75.
print('Backward Print: ', end = ' ')
h1.backwardprint() # This should print: 75,40,30,95,20,10,85.
print()


print("///  Test 05  ///")
h2 = DoublyList() # uses the constructor
h2.create_list(np.array([10, 20, 30, 40, 50, 60, 70]))
print('Forward Print: ', end = ' ')
h2.forwardprint() # This should print: 10,20,30,40,50,60,70.
print()

print('Removing node from 0th index')
print("Removed element: "+ str(h2.remove(0))) # This should print: Removed element: 10
print('Forward Print: ', end = ' ')
h2.forwardprint() # This should print: 20,30,40,50,60,70.
print('Backward Print: ', end = ' ')
h2.backwardprint() # This should print: 70,60,50,40,30,20.
print()

print('Removing node from 3rd index')
print("Removed element: "+ str(h2.remove(3))) # This should print: Removed element: 50
print('Forward Print: ', end = ' ')
h2.forwardprint() # This should print: 20,30,40,60,70.
print('Backward Print: ', end = ' ')
h2.backwardprint() # This should print: 70,60,40,30,20.
print()

print('Removing node from 4th index')
print("Removed element: "+ str(h2.remove(4))) # This should print: Removed element: 70
print('Forward Print: ', end = ' ')
h2.forwardprint() # This should print: 20,30,40,60.
print('Backward Print: ', end = ' ')
h2.backwardprint() # This should print: 60,40,30,20.
print()