 
# -*- coding: utf-8 -*-
"""21301157_AHSAN_ULLAH.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EeuPzpKpcoc0Ky4DL6KtzfeoPQeK45ds

**Instructions to Follow (Failing to follow these will result mark penalties).**


1.   You can not use any built-in function except len()
2.   You can not use any other python collections except array (e.g: tuptle, dictionaries etc.).
3. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be two approach.

  i. arr = np.array([None] * 10) #Initializing an array length 10 with values None.

  ii. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
4. From File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

# Complete the functions defined in this cell


# Test 01: Play Right
def playRight(sequence,beats):
  # TO DO
  for var in range(len(beats)):
    if beats[var] != 0 :
      temp = sequence[len(sequence)-1]
      for var in range(len(sequence)-1,-1,-1 ):
        sequence[var] = sequence[var-1]
      sequence[0] = temp
  return sequence






def rotate_left(array,idx):
  for var in range(idx,len(array)-1):
    array[var] = array[var+1]
  array[len(array)-1] = 0


# Test 02: Discard Cards
def discardCards(cards,number):
  # TO DO
  var = 0
  for i in range(len(cards)):
    if cards[var] == number:
      rotate_left(cards,var)
      var-=1
    var+=1
  return cards








#Test 03: Merge Lineup
def mergeLineup(pokemon_1, pokemon_2):
  # TO DO
  out_array = np.array([0]*len(pokemon_1))
  rev_i = len(pokemon_1)-1
  for var in range(len(pokemon_1)):
    if pokemon_1[var]  == None:
      pokemon_1[var]  = 0
    if  pokemon_2[rev_i] == None :
      pokemon_2[rev_i] = 0



    out_array[var] = pokemon_1[var] + pokemon_2[rev_i]
    rev_i-=1
  return out_array










# Test 04: Balance your Salami
def balanceSalami(salami):
  # TO DO
  salami_1 = 0
  salami_2 = 0
  i = len(salami)-1
  for var in range(len(salami)):
    salami_1+=salami[var]
    salami_2+=salami[i]
    i-=1
    return salami_1 == salami_2
  return None













# Test 05: Protecc Salami
def protectSalami(salami):

    temp = None
    for var in range(len(salami)):
        temp = salami[var]
        count = 1
        if temp == 0:
            continue
        if var == len(salami) - 2:
            if salami[var] == salami[var + 1]:
                salami[var + 1] = 0
                salami[var] = 2
                continue
        if var == len(salami) - 1:
            salami[var] = 1
            continue
        for i in range(var + 1, len(salami)):
            if salami[i] == salami[var]:
                count += 1
                salami[i] = 0
        salami[var] = count
    temp = None
    for var in range(len(salami)):
        temp = salami[var]
        if temp == 0:
            continue
        if var == len(salami) - 2:
            if salami[var] == salami[var + 1] and salami[var] > 1:
                return True
            continue
        for i in range(var + 1, len(salami)):
            if temp == salami[i] and salami[i] > 1:
                return True
    return False


















# Test 05: Odd Even Wave
def waveYourFlag(arr):
    # TO DO
    odd = 1
    even = 0
    temp = np.array([0] * len(arr))
    # temp = np.array(temp)
    if arr[0] % 2 == 1:
      odd = 0
      even = 1
    for var in range(len(arr)):
        if arr[var] % 2 == 0:
            temp[even] = arr[var]
            even += 2
        if arr[var] % 2 == 1:
            # if odd >= len(temp):
            #   continue
            temp[odd] = arr[var]
            odd += 2

    arr = temp
    return arr

# This cell is the driver code
# Run this cell after completion of above function.
# You will see the status Accepted after completion if your code is correct.
# If your function is wrong you will see wrong[correction percentage]
# This is called unit testing if you are wondering the checking approach
# No need to write or change any code here. You can only change the inputs

print("///  Test 01: Play Right  ///")
sequence=np.array([10,20,30,40,50,60])
beats = np.array([1,0,0,1,0,1])
returned_value = playRight(sequence, beats)
print(f'Task 1: {returned_value}') # This should print [40, 50, 60, 10, 20, 30]
unittest.output_test(returned_value, np.array([40, 50, 60, 10, 20, 30]))


print("///  Test 02: Discard Cards  ///")
cards = np.array([1,2,3,2,8,2,2,5,7])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1, 3, 8, 5, 7, 0, 0, 0, 0]
unittest.output_test(returned_value, np.array([1, 3, 8, 5, 7, 0, 0, 0, 0]))


print("///  Test 03: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 3: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))

pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 3: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

pokemon_1 = np.array([4, 5, None, None])
pokemon_2 = np.array([2, None, None, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 3: {returned_value}') # This should print [4,5,0,2]
unittest.output_test(returned_value, np.array([4,5,0,2]))


print("///  Test 04: Balance Your Salami  ///")
salami = np.array([1, 1, 1, 2, 1])
returned_value = balanceSalami(salami)
print(f'Task 4: {returned_value}') # This should print True
unittest.output_test(returned_value, True)

salami = [2, 1, 1, 2, 1]
returned_value = np.array(balanceSalami(salami))
print(f'Task 4: {returned_value}') # This should print False
unittest.output_test(returned_value, False)

salami = [10, 3, 1, 2, 10]
returned_value =  np.array(balanceSalami(salami))
print(f'Task 4: {returned_value}') # This should print True
unittest.output_test(returned_value, True)


print("///  Test 05: Protecc Salami  ///")
salami = np.array([4,5,6,6,4,3,6,4])
returned_value = protectSalami(salami)
print(f'Task 5: {returned_value}') # This should print True
unittest.output_test(returned_value, True)

salami = np.array([3,4,6,3,4,7,4,6,8,6,6])
returned_value = protectSalami(salami)
print(f'Task 5: {returned_value}') # This should print False
unittest.output_test(returned_value, False)


print("///  Test 06: Odd Even Wave  ///")
arr = np.array([2,12,3,8,1,5])
returned_value = waveYourFlag(arr)
print(f'Task 6: {returned_value}') # This should print [2,3,12,1,8,5]
unittest.output_test(returned_value, np.array([2,3,12,1,8,5]))

arr = np.array([45,23,78,84,41])
returned_value = waveYourFlag(arr)
print(f'Task 6: {returned_value}') # This should print [45,78,23,84,41]
unittest.output_test(returned_value, np.array([45,78,23,84,41]))
