# -*- coding: utf-8 -*-
"""21301157_Ahsan_Ullah

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LqTNuFjiZV1EeBj1KLLZhE8zwiiNkSyx

***You must run this cell to install dependency***
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

""" ***You must Run this cell for your driver code to execute successfully***"""

#Run this cell
class Node:
  def __init__(self,elem,next = None):
    self.elem,self.next = elem,next

def createList(arr):
  head = Node(arr[0])
  tail = head
  for i in range(1,len(arr)):
    newNode = Node(arr[i])
    tail.next = newNode
    tail = newNode
  return head

def printLinkedList(head):
  temp = head
  while temp != None:
    if temp.next != None:
      print(temp.elem, end = '-->')
    else:
      print(temp.elem)
    temp = temp.next
  print()

"""Assemble Conga Line"""

def conga_line(head):
  #To DO


  temp = head
  while temp.next != None:

    if temp.elem > temp.next.elem:
      return False

    temp = temp.next
  return True

head = createList(np.array([10,15,34,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(head)
returned_value = conga_line(head)
print(returned_value) #This should print True
unittest.output_test(returned_value, True)
print()

head = createList(np.array([10,15,44,41,56,72]))
print('Original Conga Line: ', end = ' ')
printLinkedList(head)
returned_value = conga_line(head)
print(returned_value) #This should print False
unittest.output_test(returned_value, False)
print()

"""Remove Compartment"""

def remove_compartment(head,n):
  #To DO

  lenght = 1
  temp = head
  while temp.next != None:
    lenght+=1
    temp = temp.next


  if n > lenght :
    return head

  if lenght == n:
    return head.next
  if n <= 0 :
    return head
  idx = lenght - n -1
  headx = head
  temp = headx

  for var in range(idx):
    temp = temp.next
  temp.next = temp.next.next
  return headx




head = createList(np.array([10,15,34,41,56,72]))
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,2)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 10-->15-->34-->41-->72
print()

head = createList(np.array([10,15,34,41,56,72]))
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,7)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 10-->15-->34-->41-->56-->72
print()

head = createList(np.array([10,15,34,41,56,72]))
print('Original Compartment Sequence: ', end = ' ')
printLinkedList(head)
head = remove_compartment(head,6)
print('Changed Compartment Sequence: ', end = ' ')
printLinkedList(head) #This should print 15-->34-->41-->56-->72
print()

"""Shuffle on index"""

def shuffle_on_index(head):
  #To DO
  temp = head
  c =1
  while temp.next!= None:
    c+=1
    temp = temp.next


  temp = head

  x = Node(None)
  xx = x

  y = Node(None)
  yy = y


  for var in range(c):


    if var % 2 == 0:

      if temp == head:
        xx.elem = temp.elem
        temp = temp.next
      else:
        xx.next = Node(temp.elem)
        xx = xx.next
        temp = temp.next




    else:
      if temp == head.next:
        yy.elem = temp.elem
        temp = temp.next
      else:
        yy.next = Node(temp.elem)
        yy = yy.next
        temp = temp.next


  xx = x
  while xx.next != None:
    xx = xx.next
  xx.next = y
  return x




head = createList(np.array(['S','E','N','P','A','I']))
print('Original Play List: ', end = ' ')
printLinkedList(head)
newhead =  shuffle_on_index(head)
print('New Play List: ', end = ' ')
printLinkedList(newhead) #This should print S-->N-->A-->E-->P-->I
print()

head = createList(np.array(['N','I','S','H','I','N','O','Y','A']))
print('Original Play List: ', end = ' ')
printLinkedList(head)
newhead =  shuffle_on_index(head)
print('New Play List: ', end = ' ')
printLinkedList(newhead) #This should print N-->S-->I-->O-->A-->I-->H-->N-->Y
print()

"""Scavenger hunt"""

def find_next_clue(head):
  temp = head

  while temp.next != None:
    tempx = temp.next

    if tempx.next == None:
      if temp.elem < tempx.elem:
        print(f'{tempx.elem} is greater than {temp.elem}')
        temp = temp.next
        continue


    while tempx.next != None:

      if temp.elem < tempx.elem :
        print(f'{tempx.elem} is greater than {temp.elem}')
        temp = temp.next
        break

      tempx = tempx.next



    if temp.elem < tempx.elem:
        print(f'{tempx.elem} is greater than {temp.elem}')
        temp = temp.next
        continue



    print(f'No next element greater than {temp.elem}')
    temp = temp.next




  print(f'No next element greater than {temp.elem}')


head = createList(np.array([7,85,54,16,11,30]))
print('Given Clue List: ', end = ' ')
printLinkedList(head)
find_next_clue(head)
print()

head = createList(np.array([20,13,33,12]))
print('Given Clue List: ', end = ' ')
printLinkedList(head)
find_next_clue(head)
print()